% This source file to be used from file 'hyprolog' as :- include(hyprologAuxPreds).

% HYPROLOG
% - a logic programming system with abduction and assumptions
%
% Concept developed by Henning Christiansen & Veronica Dahl
%
% Implemented and maintained by Henning Christiansen
%
% (c) 2008 Henning Christiansen, Roskilde University, DENMARK

% Version HYPROLOG SWI.0.2
% Last edited 19 oct 2008
%
% Adaptation of version 0.0 from 2005

% Web site for HYPROLOG: http://www.ruc.dk/~henning/hyprolog/

% Web site provides this source code running under SWI Prolog,
% documentation, scientific papers on the subject, and sample files.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%% HYPROLOG can be downloaded and used for free for any peaceful and %%%%%%%% 
%%%%%%%% non-commercial purpose.                                           %%%%%%%%
%%%%%%%% Running HYPROLOG requires a Prolog system. It is the sole         %%%%%%%%
%%%%%%%% responsibility of any HYPROLOG user to clear any possible legal   %%%%%%%%
%%%%%%%% issues with the supplier of the relevant Prolog system.           %%%%%%%%  
%%%%%%%% The developers take no responsibility for any consequences of the %%%%%%%%
%%%%%%%% use of this software.                                             %%%%%%%%
%%%%%%%% For possible commercial applications, or if any doubts concerning %%%%%%%%
%%%%%%%% these conditions, please write to the implementor.                %%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% A user predicate; refers to dynamic predicate def. in file hyprologScan1:

expectations_satisfied:-
    (declared_timeless_expectation(Exp,N),
     functor(ExpArg,Exp,N),
     chr:find_chr_constraint(ExpArg))
    -> fail
    ;
    true.



% The following predicates makes it possible for the user to play with
% assumptions from Prologs command line

+H :-
   H=.. [F|Args],
   nameToLinearAssump(F,FF),
   HH=.. [FF|Args],
   call(HH).

*H :-
   H=.. [F|Args],
   nameToIntuitionisticAssump(F,FF),
   HH=.. [FF|Args],
   call(HH).

-H :-
   H=.. [F|Args],
   nameToExpectation(F,FF),
   HH=.. [FF|Args],
   call(HH).


=+H :-
   H=.. [F|Args],
   nameToTimelessLinearAssump(F,FF),
   HH=.. [FF|Args],
   call(HH).

=-H :-
   H=.. [F|Args],
   nameToTimelessExpectation(F,FF),
   HH=.. [FF|Args],
   call(HH).

=*H :-
   H=.. [F|Args],
   nameToTimelessIntuitionisticAssump(F,FF),
   HH=.. [FF|Args],
   call(HH).

