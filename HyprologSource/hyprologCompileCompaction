% This source file to be used from file 'hyprolog' as :- include(hyprologCompileCompaction).

% HYPROLOG
% - a logic programming system with abduction and assumptions
%
% Concept developed by Henning Christiansen & Veronica Dahl
%
% Implemented and maintained by Henning Christiansen
%
% (c) 2008 Henning Christiansen, Roskilde University, DENMARK


% Version HYPROLOG SWI.0.2
% Last edited 19 oct 2008
%
% Adaptation of version 0.0 from 2005

% Web site for HYPROLOG: http://www.ruc.dk/~henning/hyprolog/

% Web site provides this source code running under SWI Prolog,
% documentation, scientific papers on the subject, and sample files.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%% HYPROLOG can be downloaded and used for free for any peaceful and %%%%%%%% 
%%%%%%%% non-commercial purpose.                                           %%%%%%%%
%%%%%%%% Running HYPROLOG requires a Prolog system. It is the sole         %%%%%%%%
%%%%%%%% responsibility of any HYPROLOG user to clear any possible legal   %%%%%%%%
%%%%%%%% issues with the supplier of the relevant Prolog system.           %%%%%%%%  
%%%%%%%% The developers take no responsibility for any consequences of the %%%%%%%%
%%%%%%%% use of this software.                                             %%%%%%%%
%%%%%%%% For possible commercial applications, or if any doubts concerning %%%%%%%%
%%%%%%%% these conditions, please write to the implementor.                %%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

compileCompactionSpec(Specs,CompactionRules):-
    compactionRules(Specs,CompactionRules),
       test_print_chr_code(CompactionRules).

compactionRules(Var,_):- var(Var), !,
    write('HYPROLOG: Illegal compaction spec.: a variable?!?'), abort.

compactionRules(P/N, _):- 
    (var(P) ; var(N)),
    write('HYPROLOG: Illegal compaction spec.: '), write(P/N), write('?!?'), abort.

compactionRules(P/N,[]):-
    \+ available_abducible_predicate(P,N),
    !,
    write('HYPROLOG warning: Compaction spec. ignored (no such pred): '),write(P/N),nl.
   
compactionRules(P/N, [(PAtom1, PAtom2#Id2  ==> true |
                               (Args1Struct==Args2Struct -> RemovePAtom1
                                ;   ?=(Args1Struct,Args2Struct) -> true
                                ;  (RemovePAtom1, Args1Struct=Args2Struct ; dif(Args1Struct,Args2Struct)))
                            pragma passive(Id2))]):-
   length(As1,N),
   (N==1 -> [Args1Struct] = As1 ;  Args1Struct =.. [v | As1]),
   PAtom1=.. [P|As1],

   length(As2,N),
   (N==1 -> [Args2Struct] = As2 ;  Args2Struct =.. [v | As2]),
   PAtom2=.. [P|As2],
   
   removeConstraintCall(PAtom1,RemovePAtom1).


compactionRules((P,Q),NPQP):-
    !,
    compactionRules(P,NP),
    compactionRules(Q,NQ),
    append(NP,NQ,NPQP).

compactionRules(S,_):-
    write('HYPROLOG: Illegal compaction spec.: '), write(S), write('?!?'), abort.


