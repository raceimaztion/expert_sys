% HYPROLOG
% - a logic programming system with abduction and assumptions
%
% Concept developed by Henning Christiansen & Veronica Dahl
%
% Implemented and maintained by Henning Christiansen
%
% (c) 2008 Henning Christiansen, Roskilde University, DENMARK

% Version HYPROLOG SWI.0.2
% Last edited 19 oct 2008
%
% Adaptation of version 0.0 from 2005

% Web site for HYPROLOG: http://www.ruc.dk/~henning/hyprolog/

% Web site provides this source code running under SWI Prolog,
% documentation, scientific papers on the subject, and sample files.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%% HYPROLOG can be downloaded and used for free for any peaceful and %%%%%%%% 
%%%%%%%% non-commercial purpose.                                           %%%%%%%%
%%%%%%%% Running HYPROLOG requires a Prolog system. It is the sole         %%%%%%%%
%%%%%%%% responsibility of any HYPROLOG user to clear any possible legal   %%%%%%%%
%%%%%%%% issues with the supplier of the relevant Prolog system.           %%%%%%%%  
%%%%%%%% The developers take no responsibility for any consequences of the %%%%%%%%
%%%%%%%% use of this software.                                             %%%%%%%%
%%%%%%%% For possible commercial applications, or if any doubts concerning %%%%%%%%
%%%%%%%% these conditions, please write to the implementor.                %%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Helpers to produce equivalents of remove_constraint rules

removeConstraintPredName(P,RemoveP):-
    name(P,PChars),
    append("remove_constraint_",PChars, RemovePChars),
    name(RemoveP,RemovePChars).

removeConstraintRule(P/N, Rule):-
   removeConstraintPredName(P,RemoveP),
   length(As,N),
   PAtom=.. [P|As],
   RemovePAtom=.. [RemoveP|As],
   Rule=
          ((RemovePAtom, PAtom#ID <=> true pragma passive(ID)))
         .
   
removeConstraintCall(P,Args,RemovePAtom):-
   removeConstraintPredName(P,RemoveP),
   RemovePAtom=.. [RemoveP|Args].
   
removeConstraintCall(Atom,RemovePAtom):-
   Atom=..[P|Args],
   removeConstraintCall(P,Args,RemovePAtom).
    
