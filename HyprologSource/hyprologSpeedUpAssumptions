% HYPROLOG
% - a logic programming system with abduction and assumptions
%
% Concept developed by Henning Christiansen & Veronica Dahl
%
% Implemented and maintained by Henning Christiansen
%
% (c) 2008 Henning Christiansen, Roskilde University, DENMARK

% Version HYPROLOG SWI.0.2 - same file for SP4.0.2
% Last edited 19 oct 2008
%
% Adaptation of version 0.0 from 2005

% Web site for HYPROLOG: http://www.ruc.dk/~henning/hyprolog/

% Web site provides this source code running under SWI Prolog,
% documentation, scientific papers on the subject, and sample files.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%% HYPROLOG can be downloaded and used for free for any peaceful and %%%%%%%% 
%%%%%%%% non-commercial purpose.                                           %%%%%%%%
%%%%%%%% Running HYPROLOG requires a Prolog system. It is the sole         %%%%%%%%
%%%%%%%% responsibility of any HYPROLOG user to clear any possible legal   %%%%%%%%
%%%%%%%% issues with the supplier of the relevant Prolog system.           %%%%%%%%  
%%%%%%%% The developers take no responsibility for any consequences of the %%%%%%%%
%%%%%%%% use of this software.                                             %%%%%%%%
%%%%%%%% For possible commercial applications, or if any doubts concerning %%%%%%%%
%%%%%%%% these conditions, please write to the implementor.                %%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%% Some tools to speed up execution of assumptions;
%% relevant for benchmarking only

%% Place before an assumption(s) or timeless_assumption(s) declaration:
%%
%%   no_star.
%%   no_plus.
%%
%% and to cancel the effect for more declarations, do as follows:
%%
%%   reset_star_plus.
%%
%% NB: if both are set, it works as if only no_plus is set.

:-dynamic star_assump_disabled/0.
:-dynamic plus_assump_disabled/0.

term_expansion(no_star,(:- (star_assump_disabled -> true
                            ; assert(star_assump_disabled)))).
term_expansion(no_plus,(:- (plus_assump_disabled -> true 
                            ; assert(plus_assump_disabled)))).

term_expansion(reset_star_plus,
        (:- reset_star_plus_proc)).

reset_star_plus_proc:-
    retractall(star_assump_disabled),
    retractall(plus_assump_disabled).
%% The dynamic predicates are tested in files 
%%   hyprologCompileAssumptions, hyprologCompileTimelessAssumptions.

