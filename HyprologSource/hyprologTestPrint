% This source file to be used from file 'hyprolog' as :- include(hyprologTestPrint).

% HYPROLOG
% - a logic programming system with abduction and assumptions
%
% Concept developed by Henning Christiansen & Veronica Dahl
%
% Implemented and maintained by Henning Christiansen
%
% (c) 2008 Henning Christiansen, Roskilde University, DENMARK


% Version HYPROLOG SWI.0.2
% Last edited 19 oct 2008
%
% Adaptation of version 0.0 from 2005

% Web site for HYPROLOG: http://www.ruc.dk/~henning/hyprolog/

% Web site provides this source code running under SWI Prolog,
% documentation, scientific papers on the subject, and sample files.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%% HYPROLOG can be downloaded and used for free for any peaceful and %%%%%%%% 
%%%%%%%% non-commercial purpose.                                           %%%%%%%%
%%%%%%%% Running HYPROLOG requires a Prolog system. It is the sole         %%%%%%%%
%%%%%%%% responsibility of any HYPROLOG user to clear any possible legal   %%%%%%%%
%%%%%%%% issues with the supplier of the relevant Prolog system.           %%%%%%%%  
%%%%%%%% The developers take no responsibility for any consequences of the %%%%%%%%
%%%%%%%% use of this software.                                             %%%%%%%%
%%%%%%%% For possible commercial applications, or if any doubts concerning %%%%%%%%
%%%%%%%% these conditions, please write to the implementor.                %%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



% This file defines a test print facilities that may be switched on by the user.


test_print_chr_code(T):- showing_internal_rules -> chr_pp_top(T) ; true.

chr_pp_top((A,B)):- !,chr_pp_top(A), chr_pp_top(B).
chr_pp_top([]):- !.
chr_pp_top([A|B]):- !,chr_pp_top(A), chr_pp_top(B).

chr_pp_top(A):-
    nl,
    mk_variant(A,AV), numbervars(AV,0,_),
    chr_pp(AV),nl.

chr_pp((H :- B)):- !,
  writeq(H), write(' :-'), nl,
  pp_chr_body(indent,4,B),write('.'),nl.


chr_pp((H==> G | B pragma P)):- !,
  writeq(H), write(' ==>'), nl,
  write_blanks(4), writeq(G), nl,
  write('  |'),nl,
  pp_chr_body(indent, 4,B),nl,
  write('  pragma '), writeq(P), write('.'),nl.

chr_pp((H==> G | B)):- !,
  writeq(H), write(' ==>'), nl,
  write_blanks(4), writeq(G), nl,
  write('  |'),nl,
  pp_chr_body(indent,4,B), write('.'),nl.

chr_pp((H==> B pragma P)):- !,
  writeq(H), write(' ==>'), nl,
  pp_chr_body(indent,4,B),nl,
  write('  pragma '), writeq(P), write('.'),nl.

chr_pp((H==> B)):- !,
  writeq(H), write(' ==>'), nl,
  pp_chr_body(indent,4,B),write('.'),nl.

chr_pp((H<=> G | B pragma P)):- !,
  writeq(H), write(' <=>'), nl,
  write_blanks(4), writeq(G), nl,
  write('  |'),nl,
  pp_chr_body(indent, 4,B),nl,
  write('  pragma '), writeq(P), write('.'),nl.

chr_pp((H<=> G | B)):- !,
  writeq(H), write(' <=>'), nl,
  write_blanks(4), writeq(G), nl,
  write('  |'),nl,
  pp_chr_body(indent,4,B), write('.'),nl.

chr_pp((H<=> B pragma P)):- !,
  writeq(H), write(' <=>'), nl,
  pp_chr_body(indent,4,B),nl,
  write('  pragma '), writeq(P), write('.'),nl.

chr_pp((H<=> B)):- !,
  writeq(H), write(' <=>'), nl,
  pp_chr_body(indent,4,B),write('.'),nl.

chr_pp((constraints C)):- !,
    writeq(constraints),nl,
    % following reuse is a hack
    pp_chr_body(indent, 4, C),write('.'),nl.
    
chr_pp(X):- writeq(X),write('.'),nl.


pp_chr_body(Cond, Blanks, (A,B)):- !,
    pp_chr_body(Cond, Blanks, A), write(','), nl, pp_chr_body(indent, Blanks, B).

pp_chr_body(Cond, Blanks, (A;B)):- !,
    write_blanks(Cond, Blanks), write('( '), Blanks2 is Blanks+2,
    pp_chr_body(noIndentFirstLine, Blanks2,A), nl,
    write_blanks(indent,Blanks), write(' ;'),nl,
    pp_chr_body(indent, Blanks2,B), write(' )').

pp_chr_body(Cond, Blanks, (A->B)):- !,
    write_blanks(Cond, Blanks),
    write('('), writeq(A), 
%%%    write('(('), writeq(A), write(')'),
    nl, write_blanks(Blanks), write('->  '), writeq(B), write(')').

pp_chr_body(Cond, Blanks, catch_fail(W,B)):- !,
    write_blanks(Cond, Blanks),
    write('catch_fail('), writeq(W), write(',('),nl,
    Blanks2 is Blanks+2,
    pp_chr_body(indent,Blanks2,B), write('))').
    
pp_chr_body(Cond, Blanks,X):- write_blanks(Cond, Blanks), writeq(X).

write_blanks(N):- write_blanks(indent,N).
write_blanks(noIndentFirstLine,_):- !.
write_blanks(_,0):- !.
write_blanks(C,N):- write(' '), N1 is N-1, write_blanks(C,N1).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% mk_variant(X,Y) -
%  - as copy_term but without copying goals blocked on X.

mk_variant(X,Y):- !, mk_variant(X,Y,_,_).

mk_variant(V,W,VList,Wlist):-
    var(V), !, locate(V,W,VList,Wlist).

mk_variant(T,T1,VList,Wlist):-
    T=..[F|TL], mk_variant1(TL,TL1,VList,Wlist), T1=..[F|TL1].

mk_variant1([],[],_,_).

mk_variant1([A|As],[B|Bs],VList,Wlist):-
    mk_variant(A,B,VList,Wlist), mk_variant1(As,Bs,VList,Wlist).


locate(V,W,VL,WL):-
    var(VL), !, VL=[V|_], WL=[W|_].

locate(V,W,[V1|_],[W|_]):- V==V1, !.

locate(V,W,[_|VL],[_|WL]):- locate(V,W,VL,WL).
