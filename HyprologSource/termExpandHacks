% HYPROLOG
% - a logic programming system with abduction and assumptions
%
% Concept developed by Henning Christiansen & Veronica Dahl
%
% Implemented and maintained by Henning Christiansen
%
% (c) 2008 Henning Christiansen, Roskilde University, DENMARK


% Version HYPROLOG SWI.0.2
% Last edited 19 oct 2008
%
% Adaptation of version 0.0 from 2005

% Web site for HYPROLOG: http://www.ruc.dk/~henning/hyprolog/

% Web site provides this source code running under SWI Prolog,
% documentation, scientific papers on the subject, and sample files.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%% HYPROLOG can be downloaded and used for free for any peaceful and %%%%%%%% 
%%%%%%%% non-commercial purpose.                                           %%%%%%%%
%%%%%%%% Running HYPROLOG requires a Prolog system. It is the sole         %%%%%%%%
%%%%%%%% responsibility of any HYPROLOG user to clear any possible legal   %%%%%%%%
%%%%%%%% issues with the supplier of the relevant Prolog system.           %%%%%%%%  
%%%%%%%% The developers take no responsibility for any consequences of the %%%%%%%%
%%%%%%%% use of this software.                                             %%%%%%%%
%%%%%%%% For possible commercial applications, or if any doubts concerning %%%%%%%%
%%%%%%%% these conditions, please write to the implementor.                %%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% This file attempts to make a reimplementation of the term_expansion facilities
% of SICStus 3 in SICStus 4, in order to need as few changes in the hyprolog sourse files,
% in the process of transferring the system to SICStus 4

% However, some changes are needed since the usages of term_expansion in the 
% original Hyprolog system had to correct for some dirty tricks made by the
% implementors of SICStus 3's version of CHR.

:- multifile user:term_expansion/6.
:- multifile user:term_expansion/2.

/**********
user:term_expansion((term_expansion(X,Y):-B), _, Ids, OutTerm, _, [oldTermExpand|Ids]) :- 
    nonmember(oldTermExpand, Ids),
    OutTerm = ((   user:term_expansion(X, _, Ids2, Y, _, [hyprolog|Ids2]):- 
                        nonmember(hyprolog, Ids2),
                        call(B),
                        !)),
    !.

user:term_expansion((term_expansion(X,Y)), _, Ids, OutTerm, _, [oldTermExpand|Ids]) :- 
    nonmember(oldTermExpand, Ids),
    OutTerm = ((   user:term_expansion(X, _, Ids2, Y, _, [hyprolog|Ids2]):- 
                        nonmember(hyprolog, Ids2),
                        !)),
    !.
**********/

user:term_expansion((term_expansion(X,Y):-B), _, Ids, OutTerm, _, [oldTermExpand|Ids]) :- 
    nonmember(oldTermExpand, Ids),
    OutTerm = ((   user:term_expansion(X, _, Ids2, Y, _, Ids2):- 
                        call(B),
                        !)),
    !.

user:term_expansion((term_expansion(X,Y)), _, Ids, OutTerm, _, [oldTermExpand|Ids]) :- 
    nonmember(oldTermExpand, Ids),
    OutTerm = ((   user:term_expansion(X, _, Ids2, Y, _, Ids2):- 
                        !)),
    !.
